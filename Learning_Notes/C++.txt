运算符重载：

class Myclass{
	public:
	
	Myclass operator+(Myclass&obj)
	{
	}
	};
虚函数（在子类中重载）


纯虚函数（在base类中不做定义,在子类中重载），含有纯虚函数
的类叫抽象类（Abstract）,抽象类无法创建object，但是可以
创建管理子类的指针。


public继承：
	base类的共有成为派生类的公有成员，保护成员成为
派生类的保护成员。基类的私有成员永远不能被派生类直接访问，
但是它们可以通过访问基类的共有和保护成员来访问私有成员。

protected继承：
	base类共有和保护成为派生类的保护成员。

private继承：
	基类的共有和保护成为派生类的私有。



class Mother{



};
class Daughter : public Mother
{

};


构造函数：
基类的构造函数先调用
析构函数：
派生类的析构函数先调用，然后基类的析构函数被调用。

friend函数（外部的函数若想访问class的私有成员，可在class里
将函数声明为该class的友元函数，只需声明即可，位置没有关系）

class MyClass{
        public:
	MyClass()
	{
	        regVar = 0;
	}
        private:
	int regVar;

        friend void someFunc(MyClass&obj);

};

void someFunc(MyClass&obj){
        obj.regVar = 42;  //可以操控obj的私有成员
        cout<<obj.regVar;
}


this关键字（成员函数中需要引用对象，this作为本对象的指针）
什么时候需要用this呢？this在运算符重载中扮演重要角色。
譬如：
MyClass operator+(MyClass &obj){
	MyClass res;
	res.var = this->var+obj.var;
	return res;
}
